//chp 25 Sealed classes
//restricted class hierarchy
//all sub classes must be declared in same file
//implicitly abstract
//useful representing states, managing UI states modeling hierarchical data
sealed class ScreenUiState{
        object Loading : ScreenUiState()
        data class Success (var data:SomeData): ScreenUiState()
        data class Error(var errorMessage:String): ScreenUiState()
}
 data class SomeData(
         val name:String
 )
        fun main(args:Array<String>){
            updateUi(screenUIState = ScreenUiState.Loading)
            updateUi(screenUIState = ScreenUiState.Success(SomeData("Test")))
        }
fun updateUi(screenUIState:ScreenUiState){
    when(screenUIState) {
        is ScreenUiState.Loading -> {
            println("Loading...")
        }

        is ScreenUiState.Success -> {
            println("screenUiState.data")
        }

        is ScreenUiState.Error -> {
            println("screenUiState.errorMessage")
        }
    }
}
